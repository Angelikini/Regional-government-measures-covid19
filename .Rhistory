firstcase$fcdate<- as.Date(firstcase$date, "%m.%d.%y")#set the date format
firstcase<-firstcase[-c(9:14,16,40:49,51:55,59:71,73:91,102:103,119:129,191:194,253:262),,drop=FALSE]#keep only the first case per country and remove the regions - any idea how to automate this?
View(firstcase)
firstcase$fcdate <- gsub("^.{0,1}", "", firstcase$date)#remove the X before the date
casesod <- cases[,-(1:5),drop=FALSE]#subset the date columns
firstcasedate<-names(casesod[-1])[apply(casesod[-1] != 0, 1, which.max)]#pivot the table so that I keep the first date a case was reported for each country
firstcase<-as.data.frame(firstcasedate)#create the new table
firstcase$country<-cases$country#add country names
firstcase$iso<-cases$ISO3#add iso3
firstcase$province<-cases$Province.State#add region names
names(firstcase)[1]<-"fcdate"#rename the date column
firstcase$fcdate <- gsub("^.{0,1}", "", firstcase$fcdate)#remove the X before the date
firstcase$fcdate<- as.Date(firstcase$date, "%m.%d.%y")#set the date format
firstcase$fcdate<- as.Date(firstcase$fcdate, "%m.%d.%y")#set the date format
firstcase<-firstcase[-c(9:14,16,40:49,51:55,59:71,73:91,102:103,119:129,191:194,253:262),,drop=FALSE]#keep only the first case per country and remove the regions - any idea how to automate this?
firsts<- merge(firstmeasure, firstcase, by.x = "iso", by.y= "iso") #merge datasets
firsts<-firsts[,c(2,11,1,10,4,9,12,22,24)] #keep only necessary columns
names(firsts)[2]<-"country" #rename column
names(firsts)[5]<-"date_measure_implemented" #rename column
names(firsts)[6]<-"measure_category" #rename column
names(firsts)[8]<-"first_case_date" #rename column
names(firsts)[9]<-"first_case_province" #rename column
fmc<-firsts[,c(2,5,8)] #subset dates only
fmc$difference<-(fmc$date_measure_implemented - fmc$first_case_date) #calculate the difference between date of first case and date of first measure
ggplot(data=fmc, aes(difference)) +
geom_histogram()+
ggsave(filename="Firstcasevsfirstmeasure_histogram.png")
rm(list=setdiff(ls(), c("measures","cases","deaths")))
datesorted<-measures[order(measures$date_implemented),] #sort gm data based on date and save in a new object
firstmeasure<- datesorted[match(unique(datesorted$country), datesorted$country),] #I kept only the first measure adoption for each country
firstmeasure[!is.na(firstmeasure$date_implemented), ]  #I decided to remove the rows with NA in the date_implemented. Alternatively I could have used the date of entry as a proxy.
region_range <- c("Asia", "Europe", "Americas", "Africa","Middle east","Pacific")
region_colors <- c("#d11141", "#00b159","#00aedb","#f37735","#ffc425", "#000000")
firstmeasure$region <- factor(firstmeasure$region, levels=region_range, ordered=TRUE)
firstmeasure<-firstmeasure %>% mutate(direction = if_else(as.double(str_sub(date_implemented, -1)) %% 2 == 0, -1, 1))
firstmeasure$positions <- ave(firstmeasure$direction, cumsum(c(0, diff(firstmeasure$direction)) != 0), FUN = function(x) x*seq(1, by = 0.5, length.out = length(x)))
text_offset <- 0.05
firstmeasure$date_count <- ave(firstmeasure$date_implemented==firstmeasure$date_implemented, firstmeasure$date_implemented, FUN=cumsum)
firstmeasure$text_position <- (firstmeasure$date_count * text_offset * firstmeasure$direction) + firstmeasure$positions
###create a new framework with the months
month_date_range <- seq(min(firstmeasure$date_implemented), max(firstmeasure$date_implemented), by='month')
month_format <- format(month_date_range, '%b')
month_df <- data.frame(month_date_range, month_format)
day_date_range <- seq(min(firstmeasure$date_implemented), max(firstmeasure$date_implemented), by='day')
day_format <- format(day_date_range, '%d')
day_df <- data.frame(day_date_range, day_format)
View(firstmeasure)
firstmeasure<-firstmeasure %>% mutate(direction = if_else(as.double(str_sub(date_implemented, -1)) %% 2 == 0, -1, 1))
library(tidyverse)
firstmeasure<-firstmeasure %>% mutate(direction = if_else(as.double(str_sub(date_implemented, -1)) %% 2 == 0, -1, 1))
firstmeasure$positions <- ave(firstmeasure$direction, cumsum(c(0, diff(firstmeasure$direction)) != 0), FUN = function(x) x*seq(1, by = 0.5, length.out = length(x)))
text_offset <- 0.05
firstmeasure$date_count <- ave(firstmeasure$date_implemented==firstmeasure$date_implemented, firstmeasure$date_implemented, FUN=cumsum)
firstmeasure$text_position <- (firstmeasure$date_count * text_offset * firstmeasure$direction) + firstmeasure$positions
month_date_range <- seq(min(firstmeasure$date_implemented), max(firstmeasure$date_implemented), by='month')
month_format <- format(month_date_range, '%b')
month_df <- data.frame(month_date_range, month_format)
day_date_range <- seq(min(firstmeasure$date_implemented), max(firstmeasure$date_implemented), by='day')
day_format <- format(day_date_range, '%d')
day_df <- data.frame(day_date_range, day_format)
timeline_plot<-ggplot(firstmeasure,aes(x=date_implemented,y=0, col=region, label=country))
timeline_plot+labs(col="Countries")+
scale_color_manual(values=region_colors, labels=region_range, drop = FALSE)+
theme_classic()+
geom_hline(yintercept=0,color = "black", size=0.3)+ # Plot horizontal black line for timeline
geom_segment(data=firstmeasure[firstmeasure$date_count == 1,], aes(y=positions,yend=0,xend=date_implemented), color='black', size=0.2)+ # Plot vertical segment lines for countries
geom_point(aes(y=0), size=3)+ # Plot scatter points at zero and date
theme(axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position = "bottom"
)+ # Don't show axes, appropriately position legend
geom_text(data=month_df, aes(x=month_date_range,y=-0.5,label=month_format),size=2,vjust=1.5, color='black', angle=0)+ # Show text for each month
geom_text(data=day_df, aes(x=day_date_range,y=-0.2,label=day_format),size=2,vjust=1.5, color='black', angle=0,label.padding=1)+ # Show text for each day
geom_text(aes(y=text_position,label=country),size=2.5)+ # Show text for each milestone
ggsave(filename="First measure timeline.png",width=25)
timeline_plot+labs(col="Countries")+
scale_color_manual(values=region_colors, labels=region_range, drop = FALSE)+
theme_classic()+
geom_hline(yintercept=0,color = "black", size=0.3)+ # Plot horizontal black line for timeline
geom_segment(data=firstmeasure[firstmeasure$date_count == 1,], aes(y=positions,yend=0,xend=date_implemented), color='black', size=0.2)+ # Plot vertical segment lines for countries
geom_point(aes(y=0), size=3)+ # Plot scatter points at zero and date
theme(axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position = "bottom"
)+ # Don't show axes, appropriately position legend
geom_text(data=month_df, aes(x=month_date_range,y=-0.5,label=month_format),size=2,vjust=1.5, color='black', angle=0)+ # Show text for each month
geom_text(data=day_df, aes(x=day_date_range,y=-0.2,label=day_format),size=2,vjust=1.5, color='black', angle=0,label.padding=1)+ # Show text for each day
geom_text(aes(y=text_position,label=country),size=2.5)+ # Show text for each milestone
ggsave(filename="First measure timeline.png",width=27)
library(ggplot2)
library(xlsx)
library(tidyverse)
firstmeasure<-firstmeasure %>% mutate(direction = if_else(as.double(str_sub(date_implemented, -1)) %% 2 == 0, -1, 1))
firstmeasure$positions <- ave(firstmeasure$direction, cumsum(c(0, diff(firstmeasure$direction)) != 0), FUN = function(x) x*seq(1, by = 0.5, length.out = length(x)))
text_offset <- 0.05
firstmeasure$date_count <- ave(firstmeasure$date_implemented==firstmeasure$date_implemented, firstmeasure$date_implemented, FUN=cumsum)
firstmeasure$text_position <- (firstmeasure$date_count * text_offset * firstmeasure$direction) + firstmeasure$positions
month_date_range <- seq(min(firstmeasure$date_implemented), max(firstmeasure$date_implemented), by='month')
month_format <- format(month_date_range, '%b')
month_df <- data.frame(month_date_range, month_format)
day_date_range <- seq(min(firstmeasure$date_implemented), max(firstmeasure$date_implemented), by='day')
day_format <- format(day_date_range, '%d')
day_df <- data.frame(day_date_range, day_format)
timeline_plot<-ggplot(firstmeasure,aes(x=date_implemented,y=0, col=region, label=country))
timeline_plot+labs(col="Countries")+
scale_color_manual(values=region_colors, labels=region_range, drop = FALSE)+
theme_classic()+
geom_hline(yintercept=0,color = "black", size=0.3)+ # Plot horizontal black line for timeline
geom_segment(data=firstmeasure[firstmeasure$date_count == 1,], aes(y=positions,yend=0,xend=date_implemented), color='black', size=0.2)+ # Plot vertical segment lines for countries
geom_point(aes(y=0), size=3)+ # Plot scatter points at zero and date
theme(axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position = "bottom"
)+ # Don't show axes, appropriately position legend
geom_text(data=month_df, aes(x=month_date_range,y=-0.5,label=month_format),size=2,vjust=1.5, color='black', angle=0)+ # Show text for each month
geom_text(data=day_df, aes(x=day_date_range,y=-0.2,label=day_format),size=2,vjust=1.5, color='black', angle=0,label.padding=1)+ # Show text for each day
geom_text(aes(y=text_position,label=country),size=2.5)+ # Show text for each milestone
ggsave(filename="First measure timeline.png",width=27)
firstmeasure<-firstmeasure %>% mutate(direction = if_else(as.double(str_sub(date_implemented, -1)) %% 2 == 0, -1, 1))
firstmeasure$positions <- ave(firstmeasure$direction, cumsum(c(0, diff(firstmeasure$direction)) != 0), FUN = function(x) x*seq(1, by = 0.5, length.out = length(x)))
text_offset <- 0.05
firstmeasure$date_count <- ave(firstmeasure$date_implemented==firstmeasure$date_implemented, firstmeasure$date_implemented, FUN=cumsum)
firstmeasure$text_position <- (firstmeasure$date_count * text_offset * firstmeasure$direction) + firstmeasure$positions
month_date_range <- seq(min(firstmeasure$date_implemented), max(firstmeasure$date_implemented), by='month')
month_format <- format(month_date_range, '%b')
month_df <- data.frame(month_date_range, month_format)
day_date_range <- seq(min(firstmeasure$date_implemented), max(firstmeasure$date_implemented), by='day')
day_format <- format(day_date_range, '%d')
day_df <- data.frame(day_date_range, day_format)
timeline_plot<-ggplot(firstmeasure,aes(x=date_implemented,y=0, col=region, label=country))
timeline_plot+labs(col="Countries")+
scale_color_manual(values=region_colors, labels=region_range, drop = FALSE)+
theme_classic()+
geom_hline(yintercept=0,color = "black", size=0.3)+ # Plot horizontal black line for timeline
geom_segment(data=firstmeasure[firstmeasure$date_count == 1,], aes(y=positions,yend=0,xend=date_implemented), color='black', size=0.2)+ # Plot vertical segment lines for countries
geom_point(aes(y=0), size=3)+ # Plot scatter points at zero and date
theme(axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position = "bottom"
)+ # Don't show axes, appropriately position legend
geom_text(data=month_df, aes(x=month_date_range,y=-0.5,label=month_format),size=2,vjust=1.5, color='black', angle=0)+ # Show text for each month
geom_text(data=day_df, aes(x=day_date_range,y=-0.2,label=day_format),size=2,vjust=1.5, color='black', angle=0,label.padding=1)+ # Show text for each day
geom_text(aes(y=text_position,label=country),size=2.5)+ # Show text for each milestone
ggsave(filename="First measure timeline.png",width=27)
library(ggplot2)
library(xlsx)
library(tidyverse)
datesorted<-measures[order(measures$date_implemented),] #sort gm data based on date and save in a new object
firstmeasure<- datesorted[match(unique(datesorted$country), datesorted$country),] #I kept only the first measure adoption for each country
firstmeasure[!is.na(firstmeasure$date_implemented), ]  #I decided to remove the rows with NA in the date_implemented. Alternatively I could have used the date of entry as a proxy.
region_range <- c("Asia", "Europe", "Americas", "Africa","Middle east","Pacific")
region_colors <- c("#d11141", "#00b159","#00aedb","#f37735","#ffc425", "#000000")
firstmeasure$region <- factor(firstmeasure$region, levels=region_range, ordered=TRUE)
firstmeasure<-firstmeasure %>% mutate(direction = if_else(as.double(str_sub(date_implemented, -1)) %% 2 == 0, -1, 1))
firstmeasure$positions <- ave(firstmeasure$direction, cumsum(c(0, diff(firstmeasure$direction)) != 0), FUN = function(x) x*seq(1, by = 0.5, length.out = length(x)))
text_offset <- 0.05
firstmeasure$date_count <- ave(firstmeasure$date_implemented==firstmeasure$date_implemented, firstmeasure$date_implemented, FUN=cumsum)
firstmeasure$text_position <- (firstmeasure$date_count * text_offset * firstmeasure$direction) + firstmeasure$positions
month_date_range <- seq(min(firstmeasure$date_implemented), max(firstmeasure$date_implemented), by='month')
month_format <- format(month_date_range, '%b')
month_df <- data.frame(month_date_range, month_format)
day_date_range <- seq(min(firstmeasure$date_implemented), max(firstmeasure$date_implemented), by='day')
day_format <- format(day_date_range, '%d')
day_df <- data.frame(day_date_range, day_format)
timeline_plot<-ggplot(firstmeasure,aes(x=date_implemented,y=0, col=region, label=country))
timeline_plot+labs(col="Countries")+
scale_color_manual(values=region_colors, labels=region_range, drop = FALSE)+
theme_classic()+
geom_hline(yintercept=0,color = "black", size=0.3)+ # Plot horizontal black line for timeline
geom_segment(data=firstmeasure[firstmeasure$date_count == 1,], aes(y=positions,yend=0,xend=date_implemented), color='black', size=0.2)+ # Plot vertical segment lines for countries
geom_point(aes(y=0), size=3)+ # Plot scatter points at zero and date
theme(axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position = "bottom"
)+ # Don't show axes, appropriately position legend
geom_text(data=month_df, aes(x=month_date_range,y=-0.5,label=month_format),size=2,vjust=1.5, color='black', angle=0)+ # Show text for each month
geom_text(data=day_df, aes(x=day_date_range,y=-0.2,label=day_format),size=2,vjust=1.5, color='black', angle=0,label.padding=1)+ # Show text for each day
geom_text(aes(y=text_position,label=country),size=2.5)+ # Show text for each milestone
ggsave(filename="First measure timeline.png",width=27)
View(firstmeasure)
timeline_plot<-ggplot(firstmeasure,aes(x=date_implemented,y=0, col=region, label=country))
timeline_plot+labs(col="Countries")+
scale_color_manual(values=region_colors, labels=region_range, drop = FALSE)+
theme_classic()+
geom_hline(yintercept=0,color = "black", size=0.3)+ # Plot horizontal black line for timeline
geom_segment(data=firstmeasure[firstmeasure$date_count == 1,], aes(y=positions,yend=0,xend=date_implemented), color='black', size=0.2)+ # Plot vertical segment lines for countries
geom_point(aes(y=0), size=3)+ # Plot scatter points at zero and date
theme(axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position = "bottom"
)+ # Don't show axes, appropriately position legend
geom_text(data=month_df, aes(x=month_date_range,y=-0.5,label=month_format),size=2,vjust=1.5, color='black', angle=0)+ # Show text for each month
geom_text(data=day_df, aes(x=day_date_range,y=-0.2,label=day_format),size=2,vjust=1.5, color='black', angle=0,label.padding=1)+ # Show text for each day
geom_text(aes(y=text_position,label=country),size=2.5)+ # Show text for each milestone
ggsave(filename="First measure timeline.png",width=27)
timeline_plot<-ggplot(firstmeasure,aes(x=date_implemented,y=0, col=region, label=country))
timeline_plot+labs(col="Countries")+
scale_color_manual(values=region_colors, labels=region_range, drop = FALSE)+
theme_classic()+
geom_hline(yintercept=0,color = "black", size=0.3)+ # Plot horizontal black line for timeline
geom_segment(data=firstmeasure[firstmeasure$date_count == 1,], aes(y=positions,yend=0,xend=date_implemented), color='black', size=0.2)+ # Plot vertical segment lines for countries
geom_point(aes(y=0), size=3)+ # Plot scatter points at zero and date
theme(axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position = "bottom"
)+ # Don't show axes, appropriately position legend
geom_text(data=month_df, aes(x=month_date_range,y=-0.5,label=month_format),size=2,vjust=1.5, color='black', angle=0)+ # Show text for each month
geom_text(data=day_df, aes(x=day_date_range,y=-0.2,label=day_format),size=2,vjust=1.5, color='black', angle=0,label.padding=1)+ # Show text for each day
geom_text(aes(y=text_position,label=country),size=2.5)+ # Show text for each milestone
ggsave(filename="First measure timeline.png",width=28)
firstmeasure<-firstmeasure %>% mutate(direction = if_else(as.double(str_sub(date_implemented, -1)) %% 2 == 0, -1, 1))
firstmeasure$positions <- ave(firstmeasure$direction, cumsum(c(0, diff(firstmeasure$direction)) != 0), FUN = function(x) x*seq(1, by = 0.5, length.out = length(x)))
text_offset <- 0.05
firstmeasure$date_count <- ave(firstmeasure$date_implemented==firstmeasure$date_implemented, firstmeasure$date_implemented, FUN=cumsum)
firstmeasure$text_position <- (firstmeasure$date_count * text_offset * firstmeasure$direction) + firstmeasure$positions
month_date_range <- seq(min(firstmeasure$date_implemented), max(firstmeasure$date_implemented), by='month')
month_format <- format(month_date_range, '%b')
month_df <- data.frame(month_date_range, month_format)
day_date_range <- seq(min(firstmeasure$date_implemented), max(firstmeasure$date_implemented), by='day')
day_format <- format(day_date_range, '%d')
day_df <- data.frame(day_date_range, day_format)
timeline_plot<-ggplot(firstmeasure,aes(x=date_implemented,y=0, col=region, label=country))
timeline_plot+labs(col="Countries")+
scale_color_manual(values=region_colors, labels=region_range, drop = FALSE)+
theme_classic()+
geom_hline(yintercept=0,color = "black", size=0.3)+ # Plot horizontal black line for timeline
geom_segment(data=firstmeasure[firstmeasure$date_count == 1,], aes(y=positions,yend=0,xend=date_implemented), color='black', size=0.2)+ # Plot vertical segment lines for countries
geom_point(aes(y=0), size=3)+ # Plot scatter points at zero and date
theme(axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position = "bottom"
)+ # Don't show axes, appropriately position legend
geom_text(data=month_df, aes(x=month_date_range,y=-0.5,label=month_format),size=2,vjust=1.5, color='black', angle=0)+ # Show text for each month
geom_text(data=day_df, aes(x=day_date_range,y=-0.2,label=day_format),size=2,vjust=1.5, color='black', angle=0,label.padding=1)+ # Show text for each day
geom_text(aes(y=text_position,label=country),size=2.5)+ # Show text for each milestone
ggsave(filename="First measure timeline.png",width=28)
# Load packages
library(httr)
library(jsonlite)
library(xlsx)
# Task 1: Download the ACAPS dataset
## Post credentials to get an authentication token
credentials <- list(username="an@acaps.org", password="Beukstraat149")
auth_token_response <- httr::POST("https://api.acaps.org/api/v1/token-auth/", body=credentials)
auth_token <- httr::content(auth_token_response)$token
## Pull data from ACAPS API and loop through the pages
df <- data.frame()
request_url <- "https://api.acaps.org/api/v1/government-measures/" # Replace with the URL of the dataset you want to access
last_request_time <- Sys.time()
while (TRUE) {
## Wait to avoid throttling
while (as.numeric(Sys.time()-last_request_time) < 1) {
Sys.sleep(0.1)
}
## Make the request
response <- httr::GET(request_url, add_headers(Authorization=paste("Token", auth_token, sep=" ")))
last_request_time <- Sys.time()
## Append to the dataframe
df_results <- jsonlite::fromJSON(content(response, "text"))$results
df <- rbind(df, df_results)
## Loop to the next page; if we are on the last page, break the loop
if (("next" %in% names(content(response))) && (typeof(content(response)[["next"]]) != "NULL")) {
request_url <- content(response)[["next"]]
}
else {
break
}
}
##rename to measures
measures<-df
## Save the dataset in excel
write.xlsx(measures,"~/GitHub/covid-data-ODI-submittion/govmes_acaps.xlsx")
#Task2: Download the Johns Hopkins COVID-19 cases dataset
## Download datasets of daily cases and deaths
cases<-read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv",header=TRUE,sep=",",dec=".")
deaths<-read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv",header=TRUE,sep=",",dec=".")
ISO3<-read.csv("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/UID_ISO_FIPS_LookUp_Table.csv",header=TRUE,sep=",",dec=".")
# Clean the environment
rm(list=setdiff(ls(), c("measures","cases","deaths","ISO3")))
#datacleaning
#packages
library(tidyverse)
##Task 1: Clean the measures dataset
###checking if data type is right
str(measures)
###Change date columns to type "Date"
measures$date_implemented <- as.Date(measures$date_implemented, "%Y-%m-%d")
measures$date_implemented[18995]<-"2020-08-13" #correct wrong date
measures$entry_date<- as.Date(measures$entry_date,"%Y-%m-%d")
str(measures)
###Change lists to characters
measures$category<- as.character(measures$category)
measures$region<- as.character(measures$region)
measures$country<- as.character(measures$country)
str(measures)
##Task 2: Clean the cases dataset
###Keep only the 2020 data
cases<-cases[,1:349]
###Add the ISO3 country codes
names(cases)[2]<-"country" #rename column
names(ISO3)[8]<-"country" #rename column
cases$ISO3<-with(ISO3, iso3[match(cases$country, country)]) #add ISO3 column
cases<-cases[,c(1:2,350,3:349)] #reorder columns
##Task 3:Clean the deaths dataset
###Keep only the 2020 data
deaths<-deaths[,1:349]
###Add the ISO3 country codes
names(deaths)[2]<-"country" #rename column
deaths$ISO3<-with(ISO3, iso3[match(deaths$country, country)]) #add ISO3 column
deaths<-deaths[,c(1:2,350,3:349)] #reorder columns
#Clean the environment
rm(list=setdiff(ls(), c("measures","cases","deaths")))
library(ggplot2)
library(xlsx)
library(tidyverse)
datesorted<-measures[order(measures$date_implemented),] #sort gm data based on date and save in a new object
firstmeasure<- datesorted[match(unique(datesorted$country), datesorted$country),] #I kept only the first measure adoption for each country
firstmeasure[!is.na(firstmeasure$date_implemented), ]  #I decided to remove the rows with NA in the date_implemented. Alternatively I could have used the date of entry as a proxy.
firstmeasure<-firstmeasure[!is.na(firstmeasure$date_implemented), ]  #I decided to remove the rows with NA in the date_implemented. Alternatively I could have used the date of entry as a proxy.
region_range <- c("Asia", "Europe", "Americas", "Africa","Middle east","Pacific")
region_colors <- c("#d11141", "#00b159","#00aedb","#f37735","#ffc425", "#000000")
firstmeasure$region <- factor(firstmeasure$region, levels=region_range, ordered=TRUE)
firstmeasure<-firstmeasure %>% mutate(direction = if_else(as.double(str_sub(date_implemented, -1)) %% 2 == 0, -1, 1))
firstmeasure$positions <- ave(firstmeasure$direction, cumsum(c(0, diff(firstmeasure$direction)) != 0), FUN = function(x) x*seq(1, by = 0.5, length.out = length(x)))
text_offset <- 0.05
firstmeasure$date_count <- ave(firstmeasure$date_implemented==firstmeasure$date_implemented, firstmeasure$date_implemented, FUN=cumsum)
firstmeasure$text_position <- (firstmeasure$date_count * text_offset * firstmeasure$direction) + firstmeasure$positions
month_date_range <- seq(min(firstmeasure$date_implemented), max(firstmeasure$date_implemented), by='month')
month_format <- format(month_date_range, '%b')
month_df <- data.frame(month_date_range, month_format)
day_date_range <- seq(min(firstmeasure$date_implemented), max(firstmeasure$date_implemented), by='day')
day_format <- format(day_date_range, '%d')
day_df <- data.frame(day_date_range, day_format)
timeline_plot<-ggplot(firstmeasure,aes(x=date_implemented,y=0, col=region, label=country))
timeline_plot+labs(col="Countries")+
scale_color_manual(values=region_colors, labels=region_range, drop = FALSE)+
theme_classic()+
geom_hline(yintercept=0,color = "black", size=0.3)+ # Plot horizontal black line for timeline
geom_segment(data=firstmeasure[firstmeasure$date_count == 1,], aes(y=positions,yend=0,xend=date_implemented), color='black', size=0.2)+ # Plot vertical segment lines for countries
geom_point(aes(y=0), size=3)+ # Plot scatter points at zero and date
theme(axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position = "bottom"
)+ # Don't show axes, appropriately position legend
geom_text(data=month_df, aes(x=month_date_range,y=-0.5,label=month_format),size=2,vjust=1.5, color='black', angle=0)+ # Show text for each month
geom_text(data=day_df, aes(x=day_date_range,y=-0.2,label=day_format),size=2,vjust=1.5, color='black', angle=0,label.padding=1)+ # Show text for each day
geom_text(aes(y=text_position,label=country),size=2.5)+ # Show text for each milestone
ggsave(filename="First measure timeline.png",width=28)
View(firstmeasure)
firstmeasure<-firstmeasure %>% mutate(direction = if_else(as.double(str_sub(date_implemented, -1)) %% 2 == 0, -1, 1))
firstmeasure<-firstmeasure %>% mutate(direction = if_else(as.double(str_sub(date_implemented, -1)) %% 2 == 0, -1, 1))
text_offset <- 0.05
firstmeasure$date_count <- ave(firstmeasure$date_implemented==firstmeasure$date_implemented, firstmeasure$date_implemented, FUN=cumsum)
firstmeasure$text_position <- (firstmeasure$date_count * text_offset * firstmeasure$direction) + firstmeasure$positions
timeline_plot<-ggplot(firstmeasure,aes(x=date_implemented,y=0, col=region, label=country))
timeline_plot+labs(col="Countries")+
scale_color_manual(values=region_colors, labels=region_range, drop = FALSE)+
theme_classic()+
geom_hline(yintercept=0,color = "black", size=0.3)+ # Plot horizontal black line for timeline
geom_segment(data=firstmeasure[firstmeasure$date_count == 1,], aes(y=positions,yend=0,xend=date_implemented), color='black', size=0.2)+ # Plot vertical segment lines for countries
geom_point(aes(y=0), size=3)+ # Plot scatter points at zero and date
theme(axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position = "bottom"
)+ # Don't show axes, appropriately position legend
geom_text(data=month_df, aes(x=month_date_range,y=-0.5,label=month_format),size=2,vjust=1.5, color='black', angle=0)+ # Show text for each month
geom_text(data=day_df, aes(x=day_date_range,y=-0.2,label=day_format),size=2,vjust=1.5, color='black', angle=0,label.padding=1)+ # Show text for each day
geom_text(aes(y=text_position,label=country),size=2.5)+ # Show text for each milestone
ggsave(filename="First measure timeline.png",width=25)
library(tidyverse)
library(ggplot2)
library(xlsx)
library(tidyverse)
datesorted<-measures[order(measures$date_implemented),] #sort gm data based on date and save in a new object
firstmeasure<- datesorted[match(unique(datesorted$country), datesorted$country),] #I kept only the first measure adoption for each country
firstmeasure<-firstmeasure[!is.na(firstmeasure$date_implemented), ]  #I decided to remove the rows with NA in the date_implemented. Alternatively I could have used the date of entry as a proxy.
region_range <- c("Asia", "Europe", "Americas", "Africa","Middle east","Pacific")
region_colors <- c("#d11141", "#00b159","#00aedb","#f37735","#ffc425", "#000000")
firstmeasure$region <- factor(firstmeasure$region, levels=region_range, ordered=TRUE)
firstmeasure<-firstmeasure %>% mutate(direction = if_else(as.double(str_sub(date_implemented, -1)) %% 2 == 0, -1, 1))
firstmeasure$positions <- ave(firstmeasure$direction, cumsum(c(0, diff(firstmeasure$direction)) != 0), FUN = function(x) x*seq(1, by = 0.5, length.out = length(x)))
text_offset <- 0.05
firstmeasure$date_count <- ave(firstmeasure$date_implemented==firstmeasure$date_implemented, firstmeasure$date_implemented, FUN=cumsum)
firstmeasure$text_position <- (firstmeasure$date_count * text_offset * firstmeasure$direction) + firstmeasure$positions
###create a new framework with the months
month_date_range <- seq(min(firstmeasure$date_implemented), max(firstmeasure$date_implemented), by='month')
month_format <- format(month_date_range, '%b')
month_df <- data.frame(month_date_range, month_format)
day_date_range <- seq(min(firstmeasure$date_implemented), max(firstmeasure$date_implemented), by='day')
day_format <- format(day_date_range, '%d')
day_df <- data.frame(day_date_range, day_format)
###create the plot
timeline_plot<-ggplot(firstmeasure,aes(x=date_implemented,y=0, col=region, label=country))
timeline_plot+labs(col="Countries")+
scale_color_manual(values=region_colors, labels=region_range, drop = FALSE)+
theme_classic()+
geom_hline(yintercept=0,color = "black", size=0.3)+ # Plot horizontal black line for timeline
geom_segment(data=firstmeasure[firstmeasure$date_count == 1,], aes(y=positions,yend=0,xend=date_implemented), color='black', size=0.2)+ # Plot vertical segment lines for countries
geom_point(aes(y=0), size=3)+ # Plot scatter points at zero and date
theme(axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position = "bottom"
)+ # Don't show axes, appropriately position legend
geom_text(data=month_df, aes(x=month_date_range,y=-0.5,label=month_format),size=2,vjust=1.5, color='black', angle=0)+ # Show text for each month
geom_text(data=day_df, aes(x=day_date_range,y=-0.2,label=day_format),size=2,vjust=1.5, color='black', angle=0,label.padding=1)+ # Show text for each day
geom_text(aes(y=text_position,label=country),size=2.5)+ # Show text for each milestone
ggsave(filename="First measure timeline.png",width=25)
### Save the dataset in excel
write.xlsx(firstmeasure,"~/GitHub/covid-data-ODI-submittion/firstmeasurebycountry.xlsx")
##Task 2: Create a table with first measure by category
firstmeasurecat<-firstmeasure$category
firstmeasurecat<-as.data.frame(table(firstmeasurecat))
firstmeasurecat<-firstmeasurecat[order(firstmeasurecat$Freq,decreasing = TRUE),]
write.xlsx(firstmeasurecat,"~/GitHub/covid-data-ODI-submittion/firstmeasurebycategory.xlsx")
##Task3: Create a table with first measure by type of measure
firstmeasuretype<-firstmeasure$measure
firstmeasuretype<-as.data.frame(table(firstmeasuretype))
firstmeasuretype<-firstmeasuretype[order(firstmeasuretype$Freq,decreasing = TRUE),]
write.xlsx(firstmeasuretype,"~/GitHub/covid-data-ODI-submittion/firstmeasurebytype.xlsx")
##Task 4: Identify distance between first case and first value
###Create first case per country table
casesod <- cases[,-(1:5),drop=FALSE]#subset the date columns
firstcasedate<-names(casesod[-1])[apply(casesod[-1] != 0, 1, which.max)]#pivot the table so that I keep the first date a case was reported for each country
firstcase<-as.data.frame(firstcasedate)#create the new table
firstcase$country<-cases$country#add country names
firstcase$iso<-cases$ISO3#add iso3
firstcase$province<-cases$Province.State#add region names
names(firstcase)[1]<-"fcdate"#rename the date column
firstcase$fcdate <- gsub("^.{0,1}", "", firstcase$fcdate)#remove the X before the date
firstcase$fcdate<- as.Date(firstcase$fcdate, "%m.%d.%y")#set the date format
firstcase<-firstcase[-c(9:14,16,40:49,51:55,59:71,73:91,102:103,119:129,191:194,253:262),,drop=FALSE]#keep only the first case per country and remove the regions - any idea how to automate this?
###Merge first measure and first case tables
firsts<- merge(firstmeasure, firstcase, by.x = "iso", by.y= "iso") #merge datasets
firsts<-firsts[,c(2,11,1,10,4,9,12,22,24)] #keep only necessary columns
names(firsts)[2]<-"country" #rename column
names(firsts)[5]<-"date_measure_implemented" #rename column
names(firsts)[6]<-"measure_category" #rename column
names(firsts)[8]<-"first_case_date" #rename column
names(firsts)[9]<-"first_case_province" #rename column
fmc<-firsts[,c(2,5,8)] #subset dates only
fmc$difference<-(fmc$date_measure_implemented - fmc$first_case_date) #calculate the difference between date of first case and date of first measure
###plot histogram
ggplot(data=fmc, aes(difference)) +
geom_histogram()+
ggsave(filename="Firstcasevsfirstmeasure_histogram.png")
rm(list=setdiff(ls(), c("measures","cases","deaths")))
