cs$date <- gsub(".", "-", cs$date)
cs
##take necessary columns
cs <- subset(cases, select = -c(Province.State, Lat, Long))
## reshape
cs <- cs %>% gather(date, case, X1.22.20:X2.11.21)
cs$date <- gsub("X", "0", cs$date)
cs
str(cs)
cs$date <- gsub(".", "/", cs$date)
cs
##take necessary columns
cs <- subset(cases, select = -c(Province.State, Lat, Long))
## reshape
cs <- cs %>% gather(date, case, X1.22.20:X2.11.21)
cs$date <- gsub("X", "0", cs$date)
cs$date <- gsub(".*", "/", cs$date)
cs
##take necessary columns
cs <- subset(cases, select = -c(Province.State, Lat, Long))
## reshape
cs <- cs %>% gather(date, case, X1.22.20:X2.11.21)
cs$date <- gsub("X", "0", cs$date)
cs$date <- gsub("\\.", "/", cs$date)
cs
cs$date <- mdy(cs$date)
cs
str(cs)
fm
names(fm)
?match
names(cs)
names(cs)[names(cs) == "Country.Region"] <- "country"
names(fm)[names(fm) == "date_implemented"] <- "date"
names(fm)
merge
## merge
dat <-
left_join(fm, cs, by=c("country","date")) %>%
rowwise() %>%
mutate(data = ifelse(between(case,min,max), data, NA)) %>%
select(-min, -max)
str(fm)
fm$date <- ymd(fm$date)
## merge
dat <-
left_join(fm, cs, by=c("country","date")) %>%
rowwise() %>%
mutate(data = ifelse(between(case,min,max), data, NA)) %>%
select(-min, -max)
## merge
dat <-
left_join(fm, cs, by=c("country","date")) %>%
rowwise() %>%
mutate(max(cs$case))
dat
View(dat)
## merge
dat <-
left_join(fm, cs, by=c("country","date")) %>%
rowwise()
dat
fm$daybefore <- fm$date -1
fm
cs$daybefore <- cs&date
cs
cs$daybefore <- cs&date
names(cs)
cs$daybefore = cs&date
cs$daybefore <- cs$date
## merge
dat <-
left_join(fm,cs, by=c("country", "daybefore")) %>%
left_join(fm, cs, by=c("country","date")) %>%
rowwise()
dat
## merge
dat <-
left_join(fm, cs, by=c("country","date")) %>%
rowwise()
dat
##take necessary columns
cs <- subset(cases, select = -c(Province.State, Lat, Long))
## reshape
cs <- cs %>% gather(date, case, X1.22.20:X2.11.21)
cs$date <- gsub("X", "0", cs$date)
cs$date <- gsub("\\.", "/", cs$date)
cs$date <- mdy(cs$date)
fm$date <- ymd(fm$date)
fm$daybefore <- fm$date -1
names(cs)[names(cs) == "Country.Region"] <- "country"
names(fm)[names(fm) == "date_implemented"] <- "date"
## merge
dat <-
left_join(fm, cs, by=c("country","date")) %>%
rowwise()
dat
names(cs)[names(cs) == "date"] <- "daybefore"
names(cs)[names(cs) == "case"] <- "case-1"
names(cs)
dat <-
left_join(dat, cs, by=c("country","daybefore")) %>%
rowwise()
dat
View(dat)
## reordering columns
order <- c("country", "measure", "daybefore", "date", "case-1", "case")
dat <- dat[, order]
dat <- color
dat
First, you might want to write a function that can calculate the slope for three consecutive values, like this:
slope  <-  function(x){
if(all(is.na(x)))
# if x is all missing, then lm will throw an error that we want to avoid
return(NA)
else
return(coef(lm(I(5:6)~x))[2])
}
slope  <-  function(x){
if(all(is.na(x)))
# if x is all missing, then lm will throw an error that we want to avoid
return(NA)
else
return(coef(lm(I(1:2)~x))[2])
}
dat$slope <- apply(dat[,c("case","case-1")], 1, slope)
dat
dat$slope <- apply(dat[,c("case-1","case")], 1, slope)
dat
dat
root <- subset(dat, select = c("country", "measure", "slope"))
root
View(root)
try <- kmeans(root, 4)
try
na.omit(root)
root <- na.omit(root)
root %>% distinct()
unique(root$measure)
root$measure <- if {
root$measure == "Health screenings in airports and border crossings"
root$measure <- 1
} else if {
root$measure == "Emergency administrative structures activated or established"
root$measure <- 2
} else if {
root$measure == "Isolation and quarantine policies"
root$measure <- 3
} else if {
root$measure == "Schools closure"
root$measure <- 4
} else if {
root$measure == "Visa restrictions"
root$measure <- 5
} else if {
root$measure == "Economic measures"
root$measure <- 6
} else if {
root$measure == "Awareness campaigns"
root$measure <- 7
} else if {
root$measure == "Border closure"
root$measure <- 8
} else if {
root$measure == "International flights suspension"
root$measure <- 9
} else if {
root$measure == "Limit public gatherings"
root$measure <- 10
} else if {
root$measure == "Border checks"
root$measure <- 11
} else if {
root$measure == "Strengthening the public health system"
root$measure <- 12
} else
root$measure <- if (root$measure == "Health screenings in airports and border crossings") {
root$measure <- 1
} else if (root$measure == "Emergency administrative structures activated or established") {
root$measure <- 2
} else if (root$measure == "Isolation and quarantine policies") {
root$measure <- 3
} else if (root$measure == "Schools closure") {
root$measure <- 4
} else if (root$measure == "Visa restrictions") {
root$measure <- 5
} else if (root$measure == "Economic measures") {
root$measure <- 6
} else if (root$measure == "Awareness campaigns") {
root$measure <- 7
} else if (root$measure == "Border closure") {
root$measure <- 8
} else if (root$measure == "International flights suspension") {
root$measure <- 9
} else if (root$measure == "Limit public gatherings") {
root$measure <- 10
} else if (root$measure == "Border checks") {
root$measure <- 11
} else if (root$measure == "Strengthening the public health system") {
root$measure <- 12
} else
root$measure <- 13
root
root$measure <- if (root$measure == "Health screenings in airports and border crossings") {
root$measure <- 1
} else if (root$measure == "Emergency administrative structures activated or established") {
root$measure <- 2
} else if (root$measure == "Isolation and quarantine policies") {
root$measure <- 3
} else if (root$measure == "Schools closure") {
root$measure <- 4
} else if (root$measure == "Visa restrictions") {
root$measure <- 5
} else if (root$measure == "Economic measures") {
root$measure <- 6
} else if (root$measure == "Awareness campaigns") {
root$measure <- 7
} else if (root$measure == "Border closure") {
root$measure <- 8
} else if (root$measure == "International flights suspension") {
root$measure <- 9
} else if (root$measure == "Limit public gatherings") {
root$measure <- 10
} else if (root$measure == "Border checks") {
root$measure <- 11
} else if (root$measure == "Strengthening the public health system") {
root$measure <- 12
} else
root <- subset(dat, select = c("country", "measure", "slope"))
root <- na.omit(root)
root <- root %>% distinct()
root
dat
root <- subset(dat, select = c("country", "measure", "slope"))
root
root <- na.omit(root)
root <- root %>% distinct()
root
root$measure <- sapply (root$measure, function(x) if(x == "Health screenings in airports and border crossings") {
1
} else if (x == "Emergency administrative structures activated or established") {
2
} else if (x == "Isolation and quarantine policies") {
3
} else if (x == "Schools closure") {
4
} else if (x == "Visa restrictions") {
5
} else if (x == "Economic measures") {
6
} else if (x == "Awareness campaigns") {
7
} else if (x == "Border closure") {
8
} else if (x == "International flights suspension") {
9
} else if (x == "Limit public gatherings") {
10
} else if (x == "Border checks") {
11
} else if (x == "Strengthening the public health system") {
12
} else {13
})
root
str(root)
root$slope <- unlist(root$slope)
str(slope)
str(root)
root
as.integer(root$slope)
as.numeric(root$slope)
root$slope <- as.numeric(root$slope)
root
str(root)
root <- subset(dat, select = c("country", "measure", "slope"))
root <- na.rm(root)
root <- subset(dat, select = c("country", "measure", "slope"))
root <- root %>% drop_na()
root <- root %>% distinct()
root
str(root)
root$measure <- sapply (root$measure, function(x) if(x == "Health screenings in airports and border crossings") {
1
} else if (x == "Emergency administrative structures activated or established") {
2
} else if (x == "Isolation and quarantine policies") {
3
} else if (x == "Schools closure") {
4
} else if (x == "Visa restrictions") {
5
} else if (x == "Economic measures") {
6
} else if (x == "Awareness campaigns") {
7
} else if (x == "Border closure") {
8
} else if (x == "International flights suspension") {
9
} else if (x == "Limit public gatherings") {
10
} else if (x == "Border checks") {
11
} else if (x == "Strengthening the public health system") {
12
} else {13
})
root$slope <- as.numeric(root$slope)
root
root$slope <- as.numeric(format(round(root$slope, 5), nsmall = 5))
root
library(stats)
df <- scale(root)
index <- root[,-1]
index
rownames(root) <- root[,1]
rownames(index) <- root[,1]
index
index <- root[,-1]
rownames(index) <- root[,1]
root
index
index <- root[,-1]
rownames(index) <- root[,1]
row.names(index) <- root$country
index <- root[,-1]
row.names(index) <- root$country
duplicated(root)
print(duplicated(root))
root$slope <- as.numeric(format(round(root$slope, 5), nsmall = 5))
root
df <- subset(root, select = c("measure", "slope"))
df <- scale(df)
df
set.seed(123)
res <- kmeans(df, 4)
print(res)
if(!require(factoextra)){
install.packages("factoextra")
library(factoextra)
}
fviz_cluster(res)
fviz_cluster(res, df)
res
res$cluster
root$cluster <- res$cluster
root
res$iter
res$centers
res$totss
plot <- fviz_cluster(res, df)
plot$labels
plot$layers
plot$data
plot$data$name <- root$country
plot
plot$data
plot
root <- root[,.SD[which.max(slope)], by= country]
root <- root[,[which.max(slope)], by= country]
library(data.table)
root <- root[,[which.max(slope)], by= country]
root <- as.data.table(root)
root <- root[,[which.max(slope)], by= country]
root <- root[,.SD[which.max(slope)], by= country]
root
df <- subset(root, select = c("measure", "slope"))
row.names(df) <- root$country
df
class(df)
df <- as.data.frame(df)
row.names(df) <- root$country
df
df <- scale(df)
res <- kmeans(df, 4)
plot <- fviz_cluster(res, df)
plot
res <- kmeans(df, 5)
plot <- fviz_cluster(res, df)
plot
plot <- fviz_cluster(res, df, geom = "text", repel = TRUE)
plot
plot <- fviz_cluster(res, df, geom = "text", repel = TRUE, ellipse = TRUE)
plot
plot <- fviz_cluster(res, df, geom = "text", repel = TRUE, ellipse = TRUE, labelsize = 1)
plot
plot <- fviz_cluster(res, df, geom = "text", repel = TRUE, ellipse = TRUE, labelsize = 10)
plot
plot <- fviz_cluster(res, df, geom = "text", repel = TRUE, ellipse = TRUE, labelsize = 9, outlier.color = "gray")
plot
plot <- fviz_cluster(res, df, geom = "text", repel = TRUE, ellipse = TRUE,
labelsize = 9, outlier.color = "gray",
ggtheme = theme_minimal())
plot
plot <- fviz_cluster(res, df, geom = "text", repel = TRUE, ellipse = TRUE,
labelsize = 9, outlier.color = "gray",
ggtheme = theme_classic())
plot
plot <- fviz_cluster(res, df, geom = "text", repel = TRUE, ellipse = TRUE,
labelsize = 9, outlier.color = "gray",
ggtheme = theme_void())
plot
plot <- fviz_cluster(res, df, geom = "text", repel = TRUE, ellipse = TRUE,
labelsize = 9, outlier.color = "gray",
ggtheme = theme_dark())
plot
plot <- fviz_cluster(res, df, geom = "text", repel = TRUE, ellipse = TRUE,
labelsize = 9, outlier.color = "gray",
ggtheme = theme_linedraw())
plot
if(!require(lubridate)){
install.packages("lubridate")
library(lubridate)
}
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
if(!require(tidyr)){
install.packages("tidyr")
library(tidyr)
}
if(!require(stats)){
install.packages("stats")
library(stats)
}
if(!require(factoextra)){
install.packages("factoextra")
library(factoextra)
}
firstmeasure
## take necessary columns
fm <- subset(firstmeasure, select = c("country", "measure", "date_implemented"))
## unlist country column
fm$country <- unlist(fm$country)
## convert date
fm$date_implemented <- ymd(fm$date_implemented)
## load cases
cases
##take necessary columns
cs <- subset(cases, select = -c(Province.State, Lat, Long))
## reshape
cs <- cs %>% gather(date, case, X1.22.20:X2.11.21)
cs$date <- gsub("X", "0", cs$date)
cs$date <- gsub("\\.", "/", cs$date)
cs$date <- mdy(cs$date)
fm$date <- ymd(fm$date)
fm$daybefore <- fm$date -1
names(cs)[names(cs) == "Country.Region"] <- "country"
names(fm)[names(fm) == "date_implemented"] <- "date"
## merge
dat <-
left_join(fm, cs, by=c("country","date")) %>%
rowwise()
names(cs)[names(cs) == "date"] <- "daybefore"
names(cs)[names(cs) == "case"] <- "case-1"
dat <-
left_join(dat, cs, by=c("country","daybefore")) %>%
rowwise()
## reordering columns
order <- c("country", "measure", "daybefore", "date", "case-1", "case")
dat <- dat[, order]
slope  <-  function(x){
if(all(is.na(x)))
# if x is all missing, then lm will throw an error that we want to avoid
return(NA)
else
return(coef(lm(I(1:2)~x))[2])
}
dat$slope <- apply(dat[,c("case-1","case")], 1, slope)
root <- subset(dat, select = c("country", "measure", "slope"))
root <- root %>% drop_na()
root <- root %>% distinct()
root <- as.data.table(root)
root <- root[,.SD[which.max(slope)], by= country]
root$measure <- sapply (root$measure, function(x) if(x == "Health screenings in airports and border crossings") {
1
} else if (x == "Emergency administrative structures activated or established") {
2
} else if (x == "Isolation and quarantine policies") {
3
} else if (x == "Schools closure") {
4
} else if (x == "Visa restrictions") {
5
} else if (x == "Economic measures") {
6
} else if (x == "Awareness campaigns") {
7
} else if (x == "Border closure") {
8
} else if (x == "International flights suspension") {
9
} else if (x == "Limit public gatherings") {
10
} else if (x == "Border checks") {
11
} else if (x == "Strengthening the public health system") {
12
} else {13
})
df <- subset(root, select = c("measure", "slope"))
df <- as.data.frame(df)
row.names(df) <- root$country
df <- scale(df)
set.seed(123)
res <- kmeans(df, 5)
plot <- fviz_cluster(res, df, geom = "text", repel = TRUE, ellipse = TRUE,
labelsize = 9, outlier.color = "gray",
ggtheme = theme_linedraw())
plot
